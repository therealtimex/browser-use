name: Publish RealTimeX Package

on:
  push:
    branches:
      - realtimex-main
      - realtimex-dev
  workflow_dispatch:

permissions:
  contents: write
  id-token: write  # Required for PyPI trusted publishing

jobs:
  publish:
    runs-on: ubuntu-latest
    env:
      IN_DOCKER: 'True'
      ANONYMIZED_TELEMETRY: 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Need previous commit to detect version changes
          token: ${{ secrets.PAT_TOKEN }}

      - name: Set up uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true
          activate-environment: true

      - name: Detect version bump
        id: version_check
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
          echo "Current version: $CURRENT_VERSION"

          # Get previous version from the last commit
          git checkout HEAD~1 -- pyproject.toml 2>/dev/null || true
          if [ -f pyproject.toml ]; then
            PREVIOUS_VERSION=$(grep '^version = ' pyproject.toml | sed 's/version = "\(.*\)"/\1/')
            echo "Previous version: $PREVIOUS_VERSION"
          else
            PREVIOUS_VERSION=""
            echo "No previous version found (first commit)"
          fi

          # Restore current pyproject.toml
          git checkout HEAD -- pyproject.toml

          # Check if version changed
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version bumped from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "should_publish=true" >> $GITHUB_OUTPUT
            echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "No version bump detected, skipping publish"
            echo "should_publish=false" >> $GITHUB_OUTPUT
          fi

      - name: Install dependencies
        if: steps.version_check.outputs.should_publish == 'true'
        run: uv sync

      - name: Run linting checks
        if: steps.version_check.outputs.should_publish == 'true'
        run: uv run ruff check --no-fix --select PLE

      - name: Build package
        if: steps.version_check.outputs.should_publish == 'true'
        run: uv build

      - name: Publish to PyPI
        if: steps.version_check.outputs.should_publish == 'true'
        env:
          PYPI_API_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        run: uv publish --token $PYPI_API_TOKEN

      - name: Create git tag
        if: steps.version_check.outputs.should_publish == 'true'
        run: |
          VERSION=${{ steps.version_check.outputs.version }}
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "v$VERSION" -m "Release v$VERSION"
          git push https://x-access-token:${{ secrets.PAT_TOKEN }}@github.com/${{ github.repository }}.git "v$VERSION"